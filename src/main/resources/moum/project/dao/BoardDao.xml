<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="moum.project.dao.BoardDao">

    <!-- BoardMap: Board 객체와 매핑 -->
    <resultMap id="BoardMap" type="moum.project.vo.Board">
        <!-- 게시글 기본 정보 매핑 -->
        <id column="board_id" property="no"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="user_id" property="userNo"/>
        <result column="post_date" property="postDate"/>
        <result column="view_count" property="viewCount"/>
        <result column="is_public" property="isPublic"/>
        <result column="is_deleted" property="isDeleted"/>
        <result column="board_type" property="boardType"/>
        <result column="price" property="price"/>
        <result column="status" property="sellOrSoldStatus"/>
        <result column="trade_type" property="tradeType"/>
        <result column="is_popular" property="isPopular"/>
        <result column="like_count" property="likeCount"/>

        <association property="collection" javaType="moum.project.vo.Collection">
            <id column="collection_id" property="no"/>
            <result column="collection_name" property="name"/>
            <!-- 추가: collection.attachedFiles -->
            <collection property="attachedFiles" ofType="moum.project.vo.AttachedFile">
                <id column="collection_photo_id" property="no"/>
                <result column="collection_filename" property="filename"/>
                <result column="collection_origin_filename" property="originFilename"/>
            </collection>
        </association>

        <association property="collectionStatus" javaType="moum.project.vo.CollectionStatus">
            <id column="status_id" property="no"/>
            <result column="status_name" property="name"/>
        </association>

        <association property="user" javaType="moum.project.vo.User">
            <id column="writer_id" property="no"/>
            <result column="nickname" property="nickname"/>
            <result column="end_date" property="endDate"/>
            <result column="user_photo" property="photo"/>
        </association>

        <association property="maincategory" javaType="moum.project.vo.Maincategory">
            <id column="maincategory_id" property="no"/>
            <result column="category_name" property="name"/>
        </association>

        <!-- 게시글의 attachedFiles -->
        <collection property="attachedFiles" ofType="moum.project.vo.AttachedFile">
            <id column="photo_id" property="no"/>
            <result column="board_id" property="boardNo"/>
            <result column="filename" property="filename"/>
            <result column="origin_filename" property="originFilename"/>
        </collection>
    </resultMap>


    <!-- 게시글 목록 조회 -->
    <select id="list" resultMap="BoardMap">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        tb.price,
        tb.status,
        c.collection_id,
        c.name AS collection_name,
        bp.photo_id,
        bp.board_id AS bp_board_id,
        bp.filename,
        bp.origin_filename
        FROM
        board b
        LEFT JOIN trade_board tb ON b.board_id = tb.board_id
        LEFT JOIN collection c ON tb.collection_id = c.collection_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        WHERE
        b.is_deleted = 0
    </select>

    <select id="selectById" resultMap="BoardMap" parameterType="int">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        u.user_id as writer_id,
        u.nickname,
        u.photo as user_photo,
        u.end_date,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        b.maincategory_id,
        mc.category_name,
        tb.collection_id,
        tb.price,
        tb.status,
        tb.trade_type,
        c.name AS collection_name,
        bp.photo_id,
        bp.board_id AS bp_board_id,
        bp.filename,
        bp.origin_filename,
        cp.photo_id AS collection_photo_id,
        cp.filename AS collection_filename,
        cp.origin_filename AS collection_origin_filename,
        (SELECT COUNT(*) FROM comment c WHERE c.board_id = b.board_id) AS comment_count

        FROM
        board b
        LEFT JOIN user u ON b.user_id = u.user_id
        LEFT JOIN maincategory mc ON b.maincategory_id = mc.maincategory_id
        LEFT JOIN trade_board tb ON b.board_id = tb.board_id
        LEFT JOIN collection c ON tb.collection_id = c.collection_id
        LEFT JOIN collection_photo cp ON c.collection_id = cp.collection_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        WHERE
        b.board_id = #{no} AND b.is_deleted = 0
    </select>


    <select id="selectByBraggingId" resultMap="BoardMap" parameterType="int">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        u.user_id as writer_id,
        u.nickname,
        u.photo as user_photo,
        u.end_date,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        b.maincategory_id,
        mc.category_name,
        tb.collection_id,
        c.name AS collection_name,
        bp.photo_id,
        bp.board_id AS bp_board_id,
        bp.filename,
        bp.origin_filename,
        cp.photo_id AS collection_photo_id,
        cp.filename AS collection_filename,
        cp.origin_filename AS collection_origin_filename,
        (SELECT COUNT(*) FROM comment c WHERE c.board_id = b.board_id) AS comment_count

        FROM
        board b
        LEFT JOIN user u ON b.user_id = u.user_id
        LEFT JOIN maincategory mc ON b.maincategory_id = mc.maincategory_id
        LEFT JOIN bragging_board tb ON b.board_id = tb.board_id
        LEFT JOIN collection c ON tb.collection_id = c.collection_id
        LEFT JOIN collection_photo cp ON c.collection_id = cp.collection_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        WHERE
        b.board_id = #{no} AND b.is_deleted = 0
    </select>


    <!-- 새로운 첨부파일 추가 -->
    <insert id="insertAttachedFiles" parameterType="java.util.List">
        INSERT INTO board_photo (
        board_id,
        filename,
        origin_filename
        )
        VALUES
        <foreach collection="list" item="file" separator=",">
            (
            #{file.boardNo},
            #{file.filename},
            #{file.originFilename}
            )
        </foreach>
    </insert>


    <insert id="insert" parameterType="moum.project.vo.Board" useGeneratedKeys="true" keyProperty="no"
            keyColumn="board_id">
        INSERT INTO board (
        title,
        content,
        user_id,
        post_date,
        board_type,
        maincategory_id
        )
        VALUES (
        #{title},
        #{content},
        #{userNo},
        NOW(),
        #{boardType},
        #{maincategory.no}
        )
    </insert>


    <!-- insertTrade 수정 -->
    <insert id="insertTrade" parameterType="moum.project.vo.Board">
        INSERT INTO trade_board (
        board_id,
        collection_id,
        price,
        status,
        trade_type
        )
        VALUES (
        #{no},
        #{collection.no},
        #{price},
        #{sellOrSoldStatus},
        #{tradeType}
        )
    </insert>


    <!-- insertTrade 수정 -->
    <insert id="insertBragging" parameterType="moum.project.vo.Board">
        INSERT INTO bragging_board (
        board_id,
        collection_id
        )
        VALUES (
        #{no},
        #{collection.no}
        )
    </insert>


    <insert id="boardInsert" parameterType="moum.project.vo.Board">
        INSERT INTO collection_board (
        board_id,
        collection_id
        )
        VALUES (
        #{no},
        #{collection.no}
        )
    </insert>


    <!-- 게시글 수정 (update) -->
    <update id="update" parameterType="moum.project.vo.Board">
        UPDATE board
        SET
        title = #{title},
        content = #{content},
        view_count = #{viewCount},
        is_public = #{isPublic}
        WHERE
        board_id = #{no}
    </update>

    <!-- trade_board 수정 -->
    <update id="updateTrade" parameterType="moum.project.vo.Board">
        UPDATE trade_board
        SET
        collection_id = #{collection.no},
        price = #{price}
        WHERE
        board_id = #{no}
    </update>

    <!-- trade_board 거래완료 수정 -->
    <update id="completeTrade" parameterType="int">
        UPDATE trade_board
        SET
        status = 1
        WHERE
        board_id = #{no}
    </update>


    <!-- 기존 첨부파일 삭제 -->
    <delete id="deleteAttachedFilesByBoardId" parameterType="int">
        DELETE FROM board_photo
        WHERE board_id = #{no}
    </delete>

    <!--  첨부파일 하나 삭제  -->
    <delete id="deleteAttachedFile" parameterType="String">
        DELETE FROM board_photo
        WHERE filename = #{filename}
    </delete>

    <!-- 논리적 삭제 (delete) -->
    <update id="delete" parameterType="int">
        UPDATE board
        SET is_deleted = 1
        WHERE board_id = #{no}
    </update>


    <!-- 조회수 증가 (increaseViewCount) -->
    <update id="increaseViewCount" parameterType="int">
        UPDATE board
        SET view_count = view_count + 1
        WHERE board_id = #{no}
    </update>

    <select id="selectByUserId" resultMap="BoardMap" parameterType="int">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        tb.collection_id,
        tb.price,
        tb.status
        FROM
        board b
        LEFT JOIN trade_board tb ON b.board_id = tb.board_id
        WHERE
        b.user_id = #{userId} AND b.is_deleted = 0
    </select>


    <!-- 최근 게시글 조회 (selectRecent) -->
    <select id="selectRecent" resultMap="BoardMap" parameterType="int">
        SELECT
        board_id,
        title,
        content,
        user_id,
        post_date,
        view_count,
        is_public,
        is_deleted
        FROM
        board
        WHERE
        is_deleted = 0
        ORDER BY
        post_date DESC
        LIMIT #{no}
    </select>


    <select id="listPopularByPage" resultMap="BoardMap">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        u.nickname,
        u.end_date,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        bp.photo_id,
        bp.filename,
        bp.origin_filename,
        IFNULL(like_count_table.like_count, 0) AS like_count
        FROM
        board b
        LEFT JOIN user u ON b.user_id = u.user_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        LEFT JOIN (
        SELECT
        l.board_id,
        COUNT(*) AS like_count
        FROM
        likes l
        GROUP BY
        l.board_id
        ) like_count_table ON b.board_id = like_count_table.board_id
        WHERE
        b.is_deleted = 0
        AND b.is_popular = TRUE
        AND b.board_type = 'general'
        GROUP BY
        b.board_id
        ORDER BY
        b.post_date DESC
        LIMIT #{offset}, #{limit}
    </select>


    <!-- 수정된 인기 게시글 총 개수 조회 -->
    <select id="countPopularPosts" resultType="int">
        SELECT COUNT(*)
        FROM board b
        WHERE
        b.is_deleted = 0
        AND b.is_popular = TRUE
        AND b.board_type = 'general'
    </select>

    <update id="updateIsPopular" parameterType="map">
        UPDATE board
        SET is_popular = #{isPopular}
        WHERE board_id = #{no}
    </update>


    <!-- 수집품 구매 게시글 조회 (listTradeBuyPosts) -->
    <select id="listTradeBuyPosts" resultMap="BoardMap" parameterType="int">
        SELECT
        b.board_id,
        b.title,
        b.user_id,
        b.post_date,
        b.view_count,
        tb.price,
        tb.status,
        tb.trade_type,
        c.collection_id,
        c.name AS collection_name,
        bp.photo_id,
        bp.board_id AS bp_board_id,
        bp.filename,
        bp.origin_filename
        FROM
        board b
        INNER JOIN trade_board tb ON b.board_id = tb.board_id
        LEFT JOIN collection c ON tb.collection_id = c.collection_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        WHERE
        b.is_deleted = 0
        AND tb.trade_type = 'buy'
        ORDER BY
        b.post_date DESC
        LIMIT #{no}
    </select>

    <!-- 수집품 판매 게시글 조회 (listTradeSellPosts) -->
    <select id="listTradeSellPosts" resultMap="BoardMap" parameterType="int">
        SELECT
        b.board_id,
        b.title,
        b.user_id,
        b.post_date,
        b.view_count,
        tb.price,
        tb.status,
        tb.trade_type,
        c.collection_id,
        c.name AS collection_name,
        bp.photo_id,
        bp.board_id AS bp_board_id,
        bp.filename,
        bp.origin_filename
        FROM
        board b
        INNER JOIN trade_board tb ON b.board_id = tb.board_id
        LEFT JOIN collection c ON tb.collection_id = c.collection_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        WHERE
        b.is_deleted = 0
        AND tb.trade_type = 'sell'
        ORDER BY
        b.post_date DESC
        LIMIT #{no}
    </select>


    <!-- 게시글 페이징 조회 (listByPage) -->
    <select id="listByPage" resultMap="BoardMap" parameterType="map">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        u.nickname,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        mc.maincategory_id,
        mc.category_name, -- 추가: maincategory 데이터를 가져옴
        bp.photo_id,
        bp.filename,
        bp.origin_filename,
        COUNT(l.board_id) AS like_count
        FROM
        board b
        LEFT JOIN maincategory mc ON b.maincategory_id = mc.maincategory_id -- maincategory 테이블과 조인
        LEFT JOIN user u ON b.user_id = u.user_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        LEFT JOIN likes l ON b.board_id = l.board_id
        WHERE
        b.is_deleted = 0
        GROUP BY
        b.board_id, mc.maincategory_id, mc.category_name, u.nickname, b.post_date, b.title,
        b.content, b.user_id, b.view_count, b.is_public, b.is_deleted, b.board_type, bp.photo_id, bp.filename,
        bp.origin_filename
        ORDER BY
        b.board_id DESC
        LIMIT #{offset}, #{limit}
    </select>


    <!-- 관리자 게시글관리 목록 조회 -->
    <select id="listByPageFromAdmin" resultMap="BoardMap" parameterType="map">
        SELECT
        b.board_id,
        b.title,
        b.user_id,
        u.user_id as writer_id,
        u.nickname,
        u.end_date,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        COUNT(l.board_id) AS like_count
        FROM
        board b
        left join user u on b.user_id = u.user_id
        left join likes l on b.board_id = l.board_id
        WHERE
        b.is_deleted = 0
        <if test="board.no != 0">
            AND b.board_id = #{board.no}
        </if>
        <if test="board.title != null">
            AND b.title LIKE CONCAT('%', #{board.title}, '%')
        </if>
        <if test="board.user != null and board.user.nickname != null">
            AND u.nickname LIKE CONCAT('%', #{board.user.nickname}, '%')
        </if>
        <if test="board.postDateString != null">
            AND b.post_date LIKE CONCAT(#{board.postDateString}, '%')
        </if>
        <if test="board.viewCount > -1">
            AND b.view_count = #{board.viewCount}
        </if>
        GROUP BY
        b.board_id, b.title, b.user_id, u.user_id, u.nickname, u.end_date,
        b.post_date, b.view_count, b.is_public, b.is_deleted, b.board_type
        <if test="board.likeCount > -1">
            HAVING COUNT(l.board_id) = #{board.likeCount}
        </if>
        ORDER BY
        b.board_id desc
        LIMIT #{pageNo}, #{pageCount}
    </select>

    <!-- 관리자 게시글관리 목록 카운팅 -->
    <select id="countFromAdmin" parameterType="moum.project.vo.Board">
        SELECT count(*)
        FROM
        (SELECT count(*)
        FROM
        board b
        left join user u on b.user_id = u.user_id
        left join likes l on b.board_id = l.board_id
        WHERE
        b.is_deleted = 0
        <if test="no != 0">
            AND b.board_id = #{no}
        </if>
        <if test="title != null">
            AND b.title LIKE CONCAT('%', #{title}, '%')
        </if>
        <if test="user != null and user.nickname != null">
            AND u.nickname LIKE CONCAT('%', #{user.nickname}, '%')
        </if>
        <if test="postDateString != null">
            AND b.post_date LIKE CONCAT(#{postDateString}, '%')
        </if>
        <if test="viewCount > -1">
            AND b.view_count = #{viewCount}
        </if>
        GROUP BY
        b.board_id, b.title, b.user_id, u.user_id, u.nickname, u.end_date,
        b.post_date, b.view_count, b.is_public, b.is_deleted, b.board_type
        <if test="likeCount > -1">
            HAVING COUNT(l.board_id) = #{likeCount}
        </if>
        ) AS count_table
    </select>

    <!-- 판매 게시글 페이징 조회 -->
    <select id="listTradeSellPostsByPage" resultMap="BoardMap" parameterType="map">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        u.nickname,
        u.end_date,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        tb.price,
        tb.status,
        tb.trade_type,
        c.collection_id,
        c.name AS collection_name,
        bp.photo_id,
        bp.filename,
        bp.origin_filename
        FROM
        board b
        INNER JOIN trade_board tb ON b.board_id = tb.board_id
        LEFT JOIN collection c ON tb.collection_id = c.collection_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        LEFT JOIN user u ON b.user_id = u.user_id
        WHERE
        b.is_deleted = 0
        AND tb.trade_type = 'sell' <!-- 판매 게시글만 조회 -->
        ORDER BY
        b.post_date DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 판매 게시글 총 개수 조회 -->
    <select id="countTradeSellPosts" resultType="int" parameterType="map">
        SELECT COUNT(*)
        FROM board b
        INNER JOIN trade_board tb ON b.board_id = tb.board_id
        WHERE
        b.is_deleted = 0
        AND tb.trade_type = 'sell'
    </select>

    <!-- 구매 게시글 페이징 조회 -->
    <select id="listTradeBuyPostsByPage" resultMap="BoardMap" parameterType="map">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        u.nickname,
        u.end_date,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        tb.price,
        tb.status,
        tb.trade_type,
        c.collection_id,
        c.name AS collection_name,
        bp.photo_id,
        bp.filename,
        bp.origin_filename
        FROM
        board b
        INNER JOIN trade_board tb ON b.board_id = tb.board_id
        LEFT JOIN collection c ON tb.collection_id = c.collection_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        LEFT JOIN user u ON b.user_id = u.user_id
        WHERE
        b.is_deleted = 0
        AND tb.trade_type = 'buy' <!-- 구매 게시글만 조회 -->
        ORDER BY
        b.post_date DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 구매 게시글 총 개수 조회 -->
    <select id="countTradeBuyPosts" resultType="int" parameterType="map">
        SELECT COUNT(*)
        FROM board b
        INNER JOIN trade_board tb ON b.board_id = tb.board_id
        WHERE
        b.is_deleted = 0
        AND tb.trade_type = 'buy'
    </select>


    <select id="searchByPage" resultMap="BoardMap" parameterType="map">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        u.nickname,
        u.end_date,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        bp.photo_id,
        bp.filename,
        bp.origin_filename,
        -- 좋아요 수 추가
        COALESCE(l.likeCount, 0) AS like_count
        FROM
        board b
        LEFT JOIN user u ON b.user_id = u.user_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        AND bp.photo_id = (
        SELECT MIN(photo_id)
        FROM board_photo
        WHERE board_id = b.board_id
        )
        -- 좋아요 수 계산을 위한 서브쿼리 추가
        LEFT JOIN (
        SELECT
        board_id,
        COUNT(*) AS likeCount
        FROM
        likes
        GROUP BY
        board_id
        ) l ON b.board_id = l.board_id
        WHERE
        b.is_deleted = 0
        AND b.board_type = 'general'
        <if test="keyword != null and keyword != ''">
            AND b.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        ORDER BY
        b.board_id DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 검색 결과의 총 개수 조회 -->

    <select id="countByKeyword" resultType="int" parameterType="map">
        SELECT COUNT(*)
        FROM board b
        WHERE
        b.is_deleted = 0
        AND b.board_type = 'general'
        <if test="keyword != null and keyword != ''">
            AND b.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
    </select>

    <select id="searchByPageWithCategory" resultMap="BoardMap" parameterType="map">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        u.nickname,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        mc.maincategory_id,
        mc.category_name,
        bp.photo_id,
        bp.filename,
        bp.origin_filename,
        COALESCE(l.like_count, 0) AS like_count
        FROM
        board b
        LEFT JOIN maincategory mc ON b.maincategory_id = mc.maincategory_id
        LEFT JOIN user u ON b.user_id = u.user_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        LEFT JOIN (
        SELECT board_id, COUNT(*) AS like_count
        FROM likes
        GROUP BY board_id
        ) l ON b.board_id = l.board_id
        WHERE
        b.is_deleted = 0
        AND b.board_type = 'general'
        <if test="keyword != null and keyword != ''">
            AND b.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="categoryNo != null">
            AND b.maincategory_id = #{categoryNo}
        </if>
        GROUP BY
        b.board_id
        ORDER BY
        b.board_id DESC
        LIMIT #{offset}, #{limit}
    </select>


    <!-- 새로운 검색 결과의 총 개수 조회 -->
    <select id="countByKeywordAndCategory" resultType="int" parameterType="map">
        SELECT COUNT(*)
        FROM
        board b
        LEFT JOIN
        maincategory mc ON b.maincategory_id = mc.maincategory_id
        WHERE
        b.is_deleted = 0
        AND b.board_type = 'general'
        <if test="keyword != null and keyword != ''">
            AND b.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="categoryNo != null">
            AND b.maincategory_id = #{categoryNo}
        </if>
    </select>

    <select id="searchPopularByPageWithCategory" resultMap="BoardMap" parameterType="map">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        u.nickname,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        mc.maincategory_id,
        mc.category_name,
        bp.photo_id,
        bp.filename,
        bp.origin_filename,
        COALESCE(l.like_count, 0) AS like_count
        FROM
        board b
        LEFT JOIN maincategory mc ON b.maincategory_id = mc.maincategory_id
        LEFT JOIN user u ON b.user_id = u.user_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        LEFT JOIN (
        SELECT board_id, COUNT(*) AS like_count
        FROM likes
        GROUP BY board_id
        ) l ON l.board_id = b.board_id
        WHERE
        b.is_deleted = 0
        AND b.is_popular = TRUE
        AND b.board_type = 'general'
        <if test="keyword != null and keyword != ''">
            AND b.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="categoryNo != null">
            AND b.maincategory_id = #{categoryNo}
        </if>
        ORDER BY
        b.board_id DESC
        LIMIT #{offset}, #{limit}
    </select>


    <!-- 인기 게시글 검색 결과의 총 개수 조회 -->
    <select id="countPopularByKeywordAndCategory" resultType="int" parameterType="map">
        SELECT COUNT(*)
        FROM
        board b
        LEFT JOIN
        maincategory mc ON b.maincategory_id = mc.maincategory_id
        WHERE
        b.is_deleted = 0
        AND b.is_popular = TRUE
        AND b.board_type = 'general'
        <if test="keyword != null and keyword != ''">
            AND b.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="categoryNo != null">
            AND b.maincategory_id = #{categoryNo}
        </if>
    </select>


    <select id="searchTradeSellPostsByPage" resultMap="BoardMap" parameterType="map">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        u.nickname,
        u.end_date,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        tb.price,
        tb.status,
        tb.trade_type,
        c.collection_id,
        c.name AS collection_name,
        mc.maincategory_id,
        mc.category_name,
        bp.photo_id,
        bp.filename,
        bp.origin_filename,
        COALESCE(l.like_count, 0) AS like_count
        FROM
        board b
        INNER JOIN trade_board tb ON b.board_id = tb.board_id
        LEFT JOIN collection c ON tb.collection_id = c.collection_id
        LEFT JOIN maincategory mc ON b.maincategory_id = mc.maincategory_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        LEFT JOIN user u ON b.user_id = u.user_id
        LEFT JOIN (
        SELECT board_id, COUNT(*) AS like_count
        FROM likes
        GROUP BY board_id
        ) l ON b.board_id = l.board_id
        WHERE
        b.is_deleted = 0
        AND tb.trade_type = 'sell'
        <if test="keyword != null and keyword != ''">
            AND b.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="categoryNo != null">
            AND b.maincategory_id = #{categoryNo}
        </if>
        ORDER BY
        b.post_date DESC
        LIMIT #{offset}, #{limit}
    </select>


    <!-- 검색 결과의 총 개수 조회 -->
    <select id="countTradeSellPostsByKeywordAndCategory" resultType="int" parameterType="map">
        SELECT COUNT(*)
        FROM
        board b
        INNER JOIN trade_board tb ON b.board_id = tb.board_id
        WHERE
        b.is_deleted = 0
        AND tb.trade_type = 'sell'
        <if test="keyword != null and keyword != ''">
            AND b.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="categoryNo != null">
            AND b.maincategory_id = #{categoryNo}
        </if>
    </select>


    <select id="searchTradeBuyPostsByPage" resultMap="BoardMap" parameterType="map">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        u.nickname,
        u.end_date,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        tb.price,
        tb.status,
        tb.trade_type,
        c.collection_id,
        c.name AS collection_name,
        mc.maincategory_id,
        mc.category_name,
        bp.photo_id,
        bp.filename,
        bp.origin_filename,
        COALESCE(l.like_count, 0) AS like_count
        FROM
        board b
        INNER JOIN trade_board tb ON b.board_id = tb.board_id
        LEFT JOIN collection c ON tb.collection_id = c.collection_id
        LEFT JOIN maincategory mc ON b.maincategory_id = mc.maincategory_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        LEFT JOIN user u ON b.user_id = u.user_id
        LEFT JOIN (
        SELECT board_id, COUNT(*) AS like_count
        FROM likes
        GROUP BY board_id
        ) l ON b.board_id = l.board_id
        WHERE
        b.is_deleted = 0
        AND tb.trade_type = 'buy'
        <if test="keyword != null and keyword != ''">
            AND b.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="categoryNo != null">
            AND b.maincategory_id = #{categoryNo}
        </if>
        ORDER BY
        b.post_date DESC
        LIMIT #{offset}, #{limit}
    </select>


    <!-- 검색 결과의 총 개수 조회 -->
    <select id="countTradeBuyPostsByKeywordAndCategory" resultType="int" parameterType="map">
        SELECT COUNT(*)
        FROM
        board b
        INNER JOIN trade_board tb ON b.board_id = tb.board_id
        WHERE
        b.is_deleted = 0
        AND tb.trade_type = 'buy' <!-- 'buy'로 수정 -->
        <if test="keyword != null and keyword != ''">
            AND b.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="categoryNo != null">
            AND b.maincategory_id = #{categoryNo}
        </if>
    </select>


    <!-- 자랑하기 게시글 페이징 조회 (listBraggingPosts) -->
    <select id="listBraggingPosts" resultMap="BoardMap" parameterType="map">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        u.nickname,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        mc.maincategory_id,
        mc.category_name,
        bp.photo_id AS collection_photo_id,
        bp.filename AS collection_filename,
        bp.origin_filename AS collection_origin_filename,
        COUNT(l.board_id) AS like_count
        FROM
        board b
        LEFT JOIN maincategory mc ON b.maincategory_id = mc.maincategory_id
        LEFT JOIN user u ON b.user_id = u.user_id
        LEFT JOIN bragging_board bb ON b.board_id = bb.board_id
        LEFT JOIN collection_photo bp ON bb.collection_id = bp.collection_id
        LEFT JOIN likes l ON b.board_id = l.board_id
        WHERE
        b.is_deleted = 0 AND b.board_type = 'bragging'
        GROUP BY
        b.board_id, mc.maincategory_id, mc.category_name, u.nickname, b.post_date, b.title,
        b.content, b.user_id, b.view_count, b.is_public, b.is_deleted, b.board_type, bp.photo_id, bp.filename,
        bp.origin_filename
        ORDER BY
        b.board_id DESC
        LIMIT #{offset}, #{limit}
    </select>


    <!-- 2. 자랑하기 게시글 총 개수 조회 -->
    <select id="countBraggingPosts" resultType="int">
        SELECT COUNT(*)
        FROM board
        WHERE board_type = 'bragging' AND is_deleted = 0
    </select>


    <!-- 추천 수가 1 이상인 자랑하기 게시글 조회 (등록 순서 기준) -->
    <select id="listWeeklyPopularBraggingPosts" resultMap="BoardMap">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        u.nickname,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        mc.maincategory_id,
        mc.category_name,
        bp.photo_id AS collection_photo_id,
        bp.filename AS collection_filename,
        bp.origin_filename AS collection_origin_filename,
        COUNT(l.board_id) AS like_count
        FROM
        board b
        LEFT JOIN maincategory mc ON b.maincategory_id = mc.maincategory_id
        LEFT JOIN user u ON b.user_id = u.user_id
        LEFT JOIN bragging_board bb ON b.board_id = bb.board_id
        LEFT JOIN collection_photo bp ON bb.collection_id = bp.collection_id
        LEFT JOIN likes l ON b.board_id = l.board_id
        WHERE
        b.is_deleted = 0
        AND b.board_type = 'bragging'
        GROUP BY
        b.board_id, mc.maincategory_id, mc.category_name, u.nickname, b.post_date, b.title,
        b.content, b.user_id, b.view_count, b.is_public, b.is_deleted, b.board_type, bp.photo_id, bp.filename,
        bp.origin_filename
        HAVING like_count >= 1
        ORDER BY
        b.post_date DESC -- 등록순 정렬
        LIMIT 2
    </select>


    <!--    &lt;!&ndash; 이전 주(월요일~일요일) 추천 상위 게시글 조회 &ndash;&gt;-->
    <!--    <select id="listWeeklyPopularBraggingPosts" resultMap="BoardMap">-->
    <!--        SELECT-->
    <!--        b.board_id,-->
    <!--        b.title,-->
    <!--        b.content,-->
    <!--        b.user_id,-->
    <!--        u.nickname,-->
    <!--        b.post_date,-->
    <!--        b.view_count,-->
    <!--        b.is_public,-->
    <!--        b.is_deleted,-->
    <!--        b.board_type,-->
    <!--        mc.maincategory_id,-->
    <!--        mc.category_name,-->
    <!--        bp.photo_id AS collection_photo_id,-->
    <!--        bp.filename AS collection_filename,-->
    <!--        bp.origin_filename AS collection_origin_filename,-->
    <!--        COUNT(l.board_id) AS like_count-->
    <!--        FROM-->
    <!--        board b-->
    <!--        LEFT JOIN maincategory mc ON b.maincategory_id = mc.maincategory_id-->
    <!--        LEFT JOIN user u ON b.user_id = u.user_id-->
    <!--        LEFT JOIN bragging_board bb ON b.board_id = bb.board_id-->
    <!--        LEFT JOIN collection_photo bp ON bb.collection_id = bp.collection_id-->
    <!--        LEFT JOIN likes l ON b.board_id = l.board_id-->
    <!--        WHERE-->
    <!--        b.is_deleted = 0-->
    <!--        AND b.board_type = 'bragging'-->
    <!--        AND b.post_date BETWEEN-->
    <!--        DATE_SUB(DATE(NOW()), INTERVAL WEEKDAY(DATE(NOW())) + 7 DAY) &#45;&#45; 이전 주 월요일-->
    <!--        AND DATE_SUB(DATE(NOW()), INTERVAL WEEKDAY(DATE(NOW())) + 1 DAY) &#45;&#45; 이전 주 일요일-->
    <!--        GROUP BY-->
    <!--        b.board_id, mc.maincategory_id, mc.category_name, u.nickname, b.post_date, b.title,-->
    <!--        b.content, b.user_id, b.view_count, b.is_public, b.is_deleted, b.board_type, bp.photo_id, bp.filename, bp.origin_filename-->
    <!--        HAVING like_count > 0 &#45;&#45; 추천 수가 0 이상인 게시글만 포함-->
    <!--        ORDER BY-->
    <!--        like_count DESC-->
    <!--        LIMIT 10-->
    <!--    </select>-->


    <!-- 주간(월요일~일요일) 자랑하기 게시글 총 개수 조회 -->
    <select id="countWeeklyBraggingPopularPosts" resultType="int">
        SELECT COUNT(*)
        FROM board
        WHERE
        board_type = 'bragging'
        AND is_deleted = 0
        AND post_date BETWEEN DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY)
        AND DATE_ADD(DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY), INTERVAL 6 DAY)
    </select>


    <!-- 5. 조회수 100 이상 인기 자랑하기 게시글 검색 -->
    <select id="searchBraggingPopularPosts" resultMap="BoardMap">
        SELECT
        b.board_id, b.title, b.content, b.user_id, b.post_date, b.view_count,
        b.is_public, b.is_deleted, b.board_type,
        mc.maincategory_id, mc.category_name
        FROM board b
        LEFT JOIN maincategory mc ON b.maincategory_id = mc.maincategory_id
        WHERE b.board_type = 'bragging' AND b.is_deleted = 0 AND b.view_count >= #{minViewCount}
        <if test="keyword != null and keyword != ''">
            AND b.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="categoryNo != null">
            AND b.maincategory_id = #{categoryNo}
        </if>
        ORDER BY b.view_count DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 6. 조회수 100 이상 인기 자랑하기 검색 결과 개수 조회 -->
    <select id="countBraggingPopularSearchResults" resultType="int">
        SELECT COUNT(*)
        FROM board
        WHERE board_type = 'bragging' AND is_deleted = 0 AND view_count >= #{minViewCount}
        <if test="keyword != null and keyword != ''">
            AND title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="categoryNo != null">
            AND maincategory_id = #{categoryNo}
        </if>
    </select>


</mapper>
